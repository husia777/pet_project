version: "3.9"

services:
  frontend:
    image: sermalenk/skypro-front:lesson-38
    ports:
      - "80:80"
    depends_on:
      - postgres
      - api
    networks:
      - front
      - back
  api:
    image: 'husia777/todo:1'
    ports:
      - 8000:8000
    expose:
      - 8000
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py runserver"

    volumes:
      - ./:/app
    networks:
      - db
      - front
      - back
  migrations:
    image: 'husia777/todo:1'
    depends_on:
      - postgres
    volumes:
      - ./backend/core/migrations:/usr/src/app/backend/core/migrations
    command: >
      sh -c "python manage.py makemigrations &&
            python manage.py makemigrations core &&
             python manage.py migrate"
    networks:
      - db
  postgres:
    image: postgres:14.6-alpine
    ports:
      - 5432:5432

    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - db

volumes:
    postgres_data:
    frontend:
networks:
  db:
  front:
  back: